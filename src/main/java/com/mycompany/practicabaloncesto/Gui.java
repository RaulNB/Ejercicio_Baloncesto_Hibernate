/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.practicabaloncesto;

import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.exception.ConstraintViolationException;

/**
 *
 * @author Raúl Nájera
 */
public class Gui extends javax.swing.JFrame {

    static SessionFactory sessionFactory = null;
    static Session session = null;
    static String controlEq = "";
    static String controlJug = "";
            
    /**
     * Creates new form NewJFrame
     */
    public Gui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        ventana = new javax.swing.JTabbedPane();
        menuEquipos = new javax.swing.JPanel();
        tablaEquipos = new javax.swing.JScrollPane();
        contenidoTablaEquipos = new javax.swing.JTable();
        botonInsertarEquipos = new javax.swing.JButton();
        botonModificarEquipos = new javax.swing.JButton();
        botonBorrarEquipos = new javax.swing.JButton();
        panelInformacionEquipos = new javax.swing.JPanel();
        labelNombreEquipos = new javax.swing.JLabel();
        textfNombreEquipos = new javax.swing.JTextField();
        labelCiudadEquipos = new javax.swing.JLabel();
        textfCiudadEquipo = new javax.swing.JTextField();
        labelConferenciaEquipos = new javax.swing.JLabel();
        combobConferenciaEquipos = new javax.swing.JComboBox<>();
        labelDivisionEquipos = new javax.swing.JLabel();
        combobDivisionEquipos = new javax.swing.JComboBox<>();
        botonAceptarEquipos = new javax.swing.JButton();
        botonCancelarEquipos = new javax.swing.JButton();
        menuJugadores = new javax.swing.JPanel();
        tablaJugadores = new javax.swing.JScrollPane();
        contenidoTablaJugadores = new javax.swing.JTable();
        botonInsertarJugadores = new javax.swing.JButton();
        botonModificarJugadores = new javax.swing.JButton();
        botonBorrarJugadores = new javax.swing.JButton();
        panelInformacionJugadores = new javax.swing.JPanel();
        labelIdJugadores = new javax.swing.JLabel();
        textfIdJugadores = new javax.swing.JTextField();
        labelNombreJugadores = new javax.swing.JLabel();
        textfNombreJugadores = new javax.swing.JTextField();
        labelUniversidadJugadores = new javax.swing.JLabel();
        textfUniversidadJugadores = new javax.swing.JTextField();
        labelAlturaJugadores = new javax.swing.JLabel();
        spinnerAlturaJugadores = new javax.swing.JSpinner();
        labelPesoJugadores = new javax.swing.JLabel();
        spinnerPesoJugadores = new javax.swing.JSpinner();
        labelPosicionJugadores = new javax.swing.JLabel();
        combobPosicionJugadores = new javax.swing.JComboBox<>();
        labelEquipoJugadores = new javax.swing.JLabel();
        combobEquipoJugadores = new javax.swing.JComboBox<>();
        botonAceptarJugadores = new javax.swing.JButton();
        botonCancelarJugadores = new javax.swing.JButton();
        menuEstEq = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textpEstEq = new javax.swing.JTextPane();
        menuEstJug = new javax.swing.JPanel();
        textfEstIdJug = new javax.swing.JTextField();
        labelEstIdJug = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textpEstJug = new javax.swing.JTextPane();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        menuEquipos.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                menuEquiposComponentShown(evt);
            }
        });

        tablaEquipos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Listado De Equipos"));

        contenidoTablaEquipos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Ciudad", "Conferencia", "División"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        contenidoTablaEquipos.setAutoscrolls(false);
        contenidoTablaEquipos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contenidoTablaEquiposMouseClicked(evt);
            }
        });
        tablaEquipos.setViewportView(contenidoTablaEquipos);

        botonInsertarEquipos.setText("Insertar");
        botonInsertarEquipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonInsertarEquiposActionPerformed(evt);
            }
        });

        botonModificarEquipos.setText("Modificar");
        botonModificarEquipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarEquiposActionPerformed(evt);
            }
        });

        botonBorrarEquipos.setText("Borrar");
        botonBorrarEquipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarEquiposActionPerformed(evt);
            }
        });

        panelInformacionEquipos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Información De Equipos"));

        labelNombreEquipos.setText("Nombre:");

        textfNombreEquipos.setEditable(false);

        labelCiudadEquipos.setText("Ciudad:");

        textfCiudadEquipo.setEditable(false);

        labelConferenciaEquipos.setText("Conferencia:");

        combobConferenciaEquipos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Este", "Oeste" }));
        combobConferenciaEquipos.setToolTipText("");
        combobConferenciaEquipos.setEnabled(false);
        combobConferenciaEquipos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combobConferenciaEquiposItemStateChanged(evt);
            }
        });

        labelDivisionEquipos.setText("División:");

        combobDivisionEquipos.setToolTipText("");
        combobDivisionEquipos.setEnabled(false);
        combobDivisionEquipos.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                combobDivisionEquiposComponentShown(evt);
            }
        });
        combobDivisionEquipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobDivisionEquiposActionPerformed(evt);
            }
        });

        botonAceptarEquipos.setText("Aceptar");
        botonAceptarEquipos.setEnabled(false);
        botonAceptarEquipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAceptarEquiposActionPerformed(evt);
            }
        });

        botonCancelarEquipos.setText("Cancelar");
        botonCancelarEquipos.setEnabled(false);
        botonCancelarEquipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarEquiposActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInformacionEquiposLayout = new javax.swing.GroupLayout(panelInformacionEquipos);
        panelInformacionEquipos.setLayout(panelInformacionEquiposLayout);
        panelInformacionEquiposLayout.setHorizontalGroup(
            panelInformacionEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInformacionEquiposLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInformacionEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInformacionEquiposLayout.createSequentialGroup()
                        .addComponent(labelNombreEquipos)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelInformacionEquiposLayout.createSequentialGroup()
                        .addGroup(panelInformacionEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textfNombreEquipos)
                            .addComponent(textfCiudadEquipo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(combobConferenciaEquipos, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelConferenciaEquipos)
                            .addComponent(labelCiudadEquipos)
                            .addComponent(labelDivisionEquipos)
                            .addComponent(combobDivisionEquipos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(15, 15, 15))
                    .addGroup(panelInformacionEquiposLayout.createSequentialGroup()
                        .addComponent(botonAceptarEquipos)
                        .addGap(18, 18, 18)
                        .addComponent(botonCancelarEquipos)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelInformacionEquiposLayout.setVerticalGroup(
            panelInformacionEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInformacionEquiposLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelNombreEquipos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textfNombreEquipos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelCiudadEquipos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textfCiudadEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelConferenciaEquipos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combobConferenciaEquipos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelDivisionEquipos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combobDivisionEquipos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelInformacionEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAceptarEquipos)
                    .addComponent(botonCancelarEquipos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout menuEquiposLayout = new javax.swing.GroupLayout(menuEquipos);
        menuEquipos.setLayout(menuEquiposLayout);
        menuEquiposLayout.setHorizontalGroup(
            menuEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuEquiposLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(menuEquiposLayout.createSequentialGroup()
                        .addComponent(botonInsertarEquipos)
                        .addGap(18, 18, 18)
                        .addComponent(botonModificarEquipos)
                        .addGap(18, 18, 18)
                        .addComponent(botonBorrarEquipos))
                    .addComponent(tablaEquipos, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelInformacionEquipos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        menuEquiposLayout.setVerticalGroup(
            menuEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuEquiposLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tablaEquipos, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(menuEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonInsertarEquipos)
                    .addComponent(botonModificarEquipos)
                    .addComponent(botonBorrarEquipos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(menuEquiposLayout.createSequentialGroup()
                .addComponent(panelInformacionEquipos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        ventana.addTab("Equipos", menuEquipos);

        menuJugadores.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                menuJugadoresComponentShown(evt);
            }
        });

        tablaJugadores.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Listado De Jugadores"));

        contenidoTablaJugadores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "Universidad", "Posición", "Equipo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        contenidoTablaJugadores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contenidoTablaJugadoresMouseClicked(evt);
            }
        });
        tablaJugadores.setViewportView(contenidoTablaJugadores);

        botonInsertarJugadores.setText("Insertar");
        botonInsertarJugadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonInsertarJugadoresActionPerformed(evt);
            }
        });

        botonModificarJugadores.setText("Modificar");
        botonModificarJugadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarJugadoresActionPerformed(evt);
            }
        });

        botonBorrarJugadores.setText("Borrar");
        botonBorrarJugadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarJugadoresActionPerformed(evt);
            }
        });

        panelInformacionJugadores.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Información De Jugadores"));

        labelIdJugadores.setText("Id:");

        textfIdJugadores.setEditable(false);
        textfIdJugadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textfIdJugadoresActionPerformed(evt);
            }
        });

        labelNombreJugadores.setText("Nombre:");

        textfNombreJugadores.setEditable(false);

        labelUniversidadJugadores.setText("Universidad:");

        textfUniversidadJugadores.setEditable(false);

        labelAlturaJugadores.setText("Altura (pies):");

        spinnerAlturaJugadores.setEnabled(false);

        labelPesoJugadores.setText("Peso (lbs):");

        spinnerPesoJugadores.setEnabled(false);

        labelPosicionJugadores.setText("Posición");

        combobPosicionJugadores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pivote", "Base", "Ala", "Escolta", "Alero" }));
        combobPosicionJugadores.setEnabled(false);

        labelEquipoJugadores.setText("Equipo");

        combobEquipoJugadores.setEnabled(false);

        botonAceptarJugadores.setText("Aceptar");
        botonAceptarJugadores.setEnabled(false);
        botonAceptarJugadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAceptarJugadoresActionPerformed(evt);
            }
        });

        botonCancelarJugadores.setText("Cancelar");
        botonCancelarJugadores.setEnabled(false);
        botonCancelarJugadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarJugadoresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInformacionJugadoresLayout = new javax.swing.GroupLayout(panelInformacionJugadores);
        panelInformacionJugadores.setLayout(panelInformacionJugadoresLayout);
        panelInformacionJugadoresLayout.setHorizontalGroup(
            panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInformacionJugadoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInformacionJugadoresLayout.createSequentialGroup()
                        .addGroup(panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelUniversidadJugadores)
                            .addComponent(labelNombreJugadores)
                            .addComponent(labelIdJugadores))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textfIdJugadores)
                            .addComponent(textfNombreJugadores)
                            .addComponent(textfUniversidadJugadores)))
                    .addGroup(panelInformacionJugadoresLayout.createSequentialGroup()
                        .addComponent(labelAlturaJugadores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerAlturaJugadores))
                    .addGroup(panelInformacionJugadoresLayout.createSequentialGroup()
                        .addComponent(labelPesoJugadores)
                        .addGap(18, 18, 18)
                        .addComponent(spinnerPesoJugadores))
                    .addGroup(panelInformacionJugadoresLayout.createSequentialGroup()
                        .addGroup(panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelEquipoJugadores)
                            .addComponent(labelPosicionJugadores))
                        .addGap(29, 29, 29)
                        .addGroup(panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(combobPosicionJugadores, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(combobEquipoJugadores, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(panelInformacionJugadoresLayout.createSequentialGroup()
                        .addComponent(botonAceptarJugadores)
                        .addGap(18, 18, 18)
                        .addComponent(botonCancelarJugadores)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelInformacionJugadoresLayout.setVerticalGroup(
            panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInformacionJugadoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelIdJugadores)
                    .addComponent(textfIdJugadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textfNombreJugadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelNombreJugadores))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textfUniversidadJugadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelUniversidadJugadores))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerAlturaJugadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelAlturaJugadores))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerPesoJugadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPesoJugadores))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combobPosicionJugadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPosicionJugadores))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combobEquipoJugadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelEquipoJugadores))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInformacionJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAceptarJugadores)
                    .addComponent(botonCancelarJugadores))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout menuJugadoresLayout = new javax.swing.GroupLayout(menuJugadores);
        menuJugadores.setLayout(menuJugadoresLayout);
        menuJugadoresLayout.setHorizontalGroup(
            menuJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuJugadoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(menuJugadoresLayout.createSequentialGroup()
                        .addComponent(botonInsertarJugadores)
                        .addGap(18, 18, 18)
                        .addComponent(botonModificarJugadores)
                        .addGap(18, 18, 18)
                        .addComponent(botonBorrarJugadores))
                    .addComponent(tablaJugadores, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelInformacionJugadores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        menuJugadoresLayout.setVerticalGroup(
            menuJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuJugadoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tablaJugadores, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(menuJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonInsertarJugadores)
                    .addComponent(botonModificarJugadores)
                    .addComponent(botonBorrarJugadores))
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(menuJugadoresLayout.createSequentialGroup()
                .addComponent(panelInformacionJugadores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        ventana.addTab("Jugadores", menuJugadores);

        menuEstEq.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                menuEstEqComponentShown(evt);
            }
        });

        textpEstEq.setEditable(false);
        textpEstEq.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                textpEstEqComponentShown(evt);
            }
        });
        jScrollPane2.setViewportView(textpEstEq);

        javax.swing.GroupLayout menuEstEqLayout = new javax.swing.GroupLayout(menuEstEq);
        menuEstEq.setLayout(menuEstEqLayout);
        menuEstEqLayout.setHorizontalGroup(
            menuEstEqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuEstEqLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                .addContainerGap())
        );
        menuEstEqLayout.setVerticalGroup(
            menuEstEqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuEstEqLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                .addContainerGap())
        );

        ventana.addTab("Estadísiticas de Equipos", menuEstEq);

        menuEstJug.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                menuEstJugComponentShown(evt);
            }
        });

        textfEstIdJug.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textfEstIdJugKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textfEstIdJugKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfEstIdJugKeyTyped(evt);
            }
        });

        labelEstIdJug.setText("ID:");

        textpEstJug.setEditable(false);
        jScrollPane1.setViewportView(textpEstJug);

        javax.swing.GroupLayout menuEstJugLayout = new javax.swing.GroupLayout(menuEstJug);
        menuEstJug.setLayout(menuEstJugLayout);
        menuEstJugLayout.setHorizontalGroup(
            menuEstJugLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuEstJugLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuEstJugLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuEstJugLayout.createSequentialGroup()
                        .addGap(0, 548, Short.MAX_VALUE)
                        .addComponent(labelEstIdJug)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textfEstIdJug, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        menuEstJugLayout.setVerticalGroup(
            menuEstJugLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuEstJugLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuEstJugLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textfEstIdJug, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelEstIdJug))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        ventana.addTab("Estadísticas de Jugadores", menuEstJug);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ventana)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ventana)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textfIdJugadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textfIdJugadoresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textfIdJugadoresActionPerformed

    //Método para insertar o modificar equipos
    private void botonAceptarEquiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAceptarEquiposActionPerformed
        switch (controlEq) {
            case "Insertar":
                if (!"".equals(textfCiudadEquipo.getText().trim()) && !textfNombreEquipos.getText().trim().equals("")) {
                    session = sessionFactory.openSession();
                    Transaction trans = session.beginTransaction();

                    Equipos equipos = new Equipos();
                    equipos.setNombre(textfNombreEquipos.getText());
                    equipos.setCiudad(textfCiudadEquipo.getText());
                    equipos.setConferencia(combobConferenciaEquipos.getSelectedItem().toString());
                    equipos.setDivision(combobDivisionEquipos.getSelectedItem().toString());

                    session.save(equipos);
                    try{
                        trans.commit();
                        this.menuEquiposComponentShown(null);
                    }catch (ConstraintViolationException e){
                        JOptionPane.showMessageDialog(this, "EQUIPO DUPLICADO\nMensaje: " + e.getMessage() + "\nCodigo de Error: "+e.getErrorCode());
                    }
                }
                else {
                    JOptionPane.showMessageDialog(this, "Algún dato no introducido");
                }
                textfNombreEquipos.setText("");
                textfCiudadEquipo.setText("");
                combobConferenciaEquipos.setSelectedIndex(0);
                combobDivisionEquipos.setSelectedIndex(0);
                break;
                
            case "Modificar":
                session = sessionFactory.openSession();
                Transaction trans = session.beginTransaction();
                Equipos eq = (Equipos) session.load(Equipos.class, textfNombreEquipos.getText());
                if (textfCiudadEquipo.getText().trim().equals("")){
                    JOptionPane.showMessageDialog(this, "Hay campos vacíos");
                }
                else {
                    eq.setCiudad(textfCiudadEquipo.getText());
                    eq.setConferencia(combobConferenciaEquipos.getSelectedItem().toString());
                    eq.setDivision(combobDivisionEquipos.getSelectedItem().toString());
                    session.update(eq);
                    trans.commit();
                    this.menuEquiposComponentShown(null);
                    this.contenidoTablaEquiposMouseClicked(null);
                }
                break;
        }
        this.botonCancelarEquiposActionPerformed(null);
    }//GEN-LAST:event_botonAceptarEquiposActionPerformed

    //Método para insertar o modificar jugadores
    private void botonAceptarJugadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAceptarJugadoresActionPerformed
        switch (controlJug) {
            case "Insertar":
                if (!textfIdJugadores.getText().equals("") && !textfNombreJugadores.getText().equals("") && !textfUniversidadJugadores.getText().equals("") && combobEquipoJugadores.getSelectedIndex() != -1) {
                    try {    
                        session = sessionFactory.openSession();
                        Transaction trans = session.beginTransaction();

                        Equipos eq = (Equipos) session.load(Equipos.class, combobEquipoJugadores.getSelectedItem().toString());

                        Jugadores jug = new Jugadores();
                        jug.setCodigo(Integer.parseInt(textfIdJugadores.getText()));
                        jug.setNombre(textfNombreJugadores.getText());
                        jug.setProcedencia(textfUniversidadJugadores.getText());
                        jug.setAltura(Float.parseFloat(spinnerAlturaJugadores.getValue().toString()));
                        jug.setPeso((int) spinnerPesoJugadores.getValue());
                        jug.setPosicion(combobPosicionJugadores.getSelectedItem().toString());
                        jug.setEquipos(eq);

                        Set jugadores = eq.getJugadoreses();
                        jugadores.add(jug);
                        eq.setJugadoreses(jugadores);

                        session.save(jug);
                        session.update(eq);

                        try {
                            trans.commit();
                            this.menuJugadoresComponentShown(null);
                        } catch (ConstraintViolationException e){
                            JOptionPane.showMessageDialog(this, "NO SE PUEDE AÑADIR EL JUGADOR\nMensaje: " + e.getMessage() + "\nCodigo de Error: "+e.getErrorCode());
                        }
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "ID NO VÁLIDO\nMensaje: " + e.getMessage());
                    }
                }
                else {
                    JOptionPane.showMessageDialog(this, "Algún dato no introducido");
                }
                textfIdJugadores.setText("");
                textfNombreJugadores.setText("");
                textfUniversidadJugadores.setText("");
                spinnerAlturaJugadores.setValue(0);
                spinnerPesoJugadores.setValue(0);
                combobPosicionJugadores.setSelectedIndex(0);
                combobEquipoJugadores.setSelectedIndex(0);
                break;
            case "Modificar":
                 if (!textfNombreJugadores.getText().equals("") && !textfUniversidadJugadores.getText().equals("") && combobEquipoJugadores.getSelectedIndex() != -1) {
                    session = sessionFactory.openSession();
                    Transaction trans = session.beginTransaction();

                    Jugadores jug = (Jugadores) session.load(Jugadores.class, Integer.parseInt(textfIdJugadores.getText()));
                    Equipos eqActual = jug.getEquipos();
                    Equipos eqNuevo = (Equipos) session.load(Equipos.class, combobEquipoJugadores.getSelectedItem().toString());

                    Set setActual = eqActual.getJugadoreses();
                    setActual.remove(jug);
                    eqActual.setJugadoreses(setActual);
                    
                    jug.setNombre(textfNombreJugadores.getText());
                    jug.setProcedencia(textfUniversidadJugadores.getText());
                    jug.setAltura(Float.parseFloat(spinnerAlturaJugadores.getValue().toString()));
                    jug.setPeso((int) spinnerPesoJugadores.getValue());
                    jug.setPosicion(combobPosicionJugadores.getSelectedItem().toString());
                    jug.setEquipos(eqNuevo);
                    
                    Set setNuevo = eqNuevo.getJugadoreses();
                    setNuevo.add(jug);
                    eqNuevo.setJugadoreses(setNuevo);
                    
                    session.update(jug);
                    session.update(eqActual);
                    session.update(eqNuevo);
                    
                    trans.commit();
                    
                    this.menuJugadoresComponentShown(null);
                    this.contenidoTablaJugadoresMouseClicked(null);
                 }
                 else {
                     JOptionPane.showMessageDialog(this, "Hay campos vacíos");
                 }
                break;
        }
        this.botonCancelarJugadoresActionPerformed(null);
    }//GEN-LAST:event_botonAceptarJugadoresActionPerformed

    //Método para mostrar equipos al entrar en la pestaña de equipos
    private void menuEquiposComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_menuEquiposComponentShown
        session = sessionFactory.openSession();
        
        combobDivisionEquipos.removeAllItems();
        if (combobConferenciaEquipos.getSelectedItem().toString().equals("Este")) {
            combobDivisionEquipos.addItem("Atlántico");
            combobDivisionEquipos.addItem("Sureste");
            combobDivisionEquipos.addItem("Central");
        }
        else {
            combobDivisionEquipos.addItem("Noroeste");
            combobDivisionEquipos.addItem("Suroeste");
            combobDivisionEquipos.addItem("Pacífico");
        }
        
        Query query = session.createQuery("from Equipos");
        List <Equipos> list = query.list();
        Iterator <Equipos> iterator = list.iterator();
        
        DefaultTableModel model = (DefaultTableModel) contenidoTablaEquipos.getModel();
        
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        
        for (int i = 0; iterator.hasNext(); i++) {
            model.addRow(new Object[0]);
            Equipos eq = iterator.next();
            model.setValueAt(eq.getNombre(), i, 0);
            model.setValueAt(eq.getCiudad(), i, 1);
            model.setValueAt(eq.getConferencia(), i, 2);
            model.setValueAt(eq.getDivision(), i, 3);
        }

        session.close();
    }//GEN-LAST:event_menuEquiposComponentShown

    private void combobDivisionEquiposComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_combobDivisionEquiposComponentShown
        
    }//GEN-LAST:event_combobDivisionEquiposComponentShown

    private void combobDivisionEquiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobDivisionEquiposActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combobDivisionEquiposActionPerformed

    //Método para cambiar las divisiones cuando se cambie la conferencia
    private void combobConferenciaEquiposItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combobConferenciaEquiposItemStateChanged
        combobDivisionEquipos.removeAllItems();
        if (combobConferenciaEquipos.getSelectedItem().toString().equals("Este")) {
            combobDivisionEquipos.addItem("Atlántico");
            combobDivisionEquipos.addItem("Sureste");
            combobDivisionEquipos.addItem("Central");
        }
        else {
            combobDivisionEquipos.addItem("Noroeste");
            combobDivisionEquipos.addItem("Suroeste");
            combobDivisionEquipos.addItem("Pacífico");
        }
    }//GEN-LAST:event_combobConferenciaEquiposItemStateChanged

    //Método para permitir insertar un equipo
    private void botonInsertarEquiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInsertarEquiposActionPerformed
        controlEq = "Insertar";
        
        textfNombreEquipos.setEditable(true);
        textfCiudadEquipo.setEditable(true);
        botonInsertarEquipos.setEnabled(false);
        botonBorrarEquipos.setEnabled(false);
        botonModificarEquipos.setEnabled(false);
        botonAceptarEquipos.setEnabled(true);
        botonCancelarEquipos.setEnabled(true);
        
        textfNombreEquipos.setText("");
        textfCiudadEquipo.setText("");
        combobConferenciaEquipos.setEnabled(true);
        combobDivisionEquipos.setEnabled(true);
        combobConferenciaEquipos.setSelectedIndex(0);
        combobDivisionEquipos.setSelectedIndex(0);
    }//GEN-LAST:event_botonInsertarEquiposActionPerformed

    //Método para dejar la pestaña equipos en su estado inicial
    private void botonCancelarEquiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarEquiposActionPerformed
        controlEq = "";
        botonAceptarEquipos.setEnabled(false);
        botonCancelarEquipos.setEnabled(false);
        botonInsertarEquipos.setEnabled(true);
        botonModificarEquipos.setEnabled(true);
        botonBorrarEquipos.setEnabled(true);
        
        textfNombreEquipos.setEditable(false);
        textfCiudadEquipo.setEditable(false);
        combobConferenciaEquipos.setEnabled(false);
        combobDivisionEquipos.setEnabled(false);
        
        this.contenidoTablaEquiposMouseClicked(null);
    }//GEN-LAST:event_botonCancelarEquiposActionPerformed

    //Método para mostrar los datos del equipo cuando se cambie el equipo seleccionado
    private void contenidoTablaEquiposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contenidoTablaEquiposMouseClicked
            if (controlEq.equals("") && contenidoTablaEquipos.getSelectedRow() != -1) {
                textfNombreEquipos.setText(contenidoTablaEquipos.getValueAt(contenidoTablaEquipos.getSelectedRow(), 0).toString());
                textfCiudadEquipo.setText(contenidoTablaEquipos.getValueAt(contenidoTablaEquipos.getSelectedRow(), 1).toString());
                combobConferenciaEquipos.setSelectedItem(contenidoTablaEquipos.getValueAt(contenidoTablaEquipos.getSelectedRow(), 2).toString());
                combobDivisionEquipos.setSelectedItem(contenidoTablaEquipos.getValueAt(contenidoTablaEquipos.getSelectedRow(), 3).toString());
            }
    }//GEN-LAST:event_contenidoTablaEquiposMouseClicked

    //Método para borrar el equipo seleccionado
    private void botonBorrarEquiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarEquiposActionPerformed
        if (contenidoTablaEquipos.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Ningún equipo seleccionado");
        }
        else {
            try {
                session = sessionFactory.openSession();
                Transaction trans = session.beginTransaction();

                String nombre = contenidoTablaEquipos.getValueAt(contenidoTablaEquipos.getSelectedRow(), 0).toString();
                Equipos eq = (Equipos) session.load(Equipos.class, nombre);

                session.delete(eq);
                trans.commit();
                this.menuEquiposComponentShown(null);
                JOptionPane.showMessageDialog(this, "Equipo eliminado correctamente");
            } catch (ConstraintViolationException e) {
                JOptionPane.showMessageDialog(this, "No se puede borrar el equipo");
            }
        }
    }//GEN-LAST:event_botonBorrarEquiposActionPerformed

    //Método que permite modificar el equipo seleccionado
    private void botonModificarEquiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarEquiposActionPerformed
        if(contenidoTablaEquipos.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(this, "No hay ningún equipo seleccionado");
        }
        else {
            controlEq = "Modificar";

            textfCiudadEquipo.setEditable(true);
            botonInsertarEquipos.setEnabled(false);
            botonBorrarEquipos.setEnabled(false);
            botonModificarEquipos.setEnabled(false);
            botonAceptarEquipos.setEnabled(true);
            botonCancelarEquipos.setEnabled(true);
            combobConferenciaEquipos.setEnabled(true);
            combobDivisionEquipos.setEnabled(true);
        }
    }//GEN-LAST:event_botonModificarEquiposActionPerformed

    //Método para mostrar jugadores al entrar en la pestaña de equipos
    private void menuJugadoresComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_menuJugadoresComponentShown
        session = sessionFactory.openSession();
        Query query = session.createQuery("from Equipos");
        List <Equipos> list = query.list();
        Iterator <Equipos> iterator = list.iterator();
        
        DefaultTableModel model = (DefaultTableModel) contenidoTablaJugadores.getModel();
        
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        
        combobEquipoJugadores.removeAllItems();
        while (iterator.hasNext()) {
            combobEquipoJugadores.addItem(iterator.next().getNombre());
        }
        
        query = session.createQuery("from Jugadores");
        List <Jugadores> listJug = query.list();
        Iterator <Jugadores> iteratorJug = listJug.iterator();
        
        while (iteratorJug.hasNext()) {
            Jugadores jug = iteratorJug.next();
            model.addRow(new Object[] { jug.getCodigo(), jug.getNombre(), jug.getProcedencia(), jug.getPosicion(), jug.getEquipos().getNombre() } );
        }
        
        session.close();
    }//GEN-LAST:event_menuJugadoresComponentShown

    //Método para mostrar los datos del jugador cuando se cambie el jugador seleccionado
    private void contenidoTablaJugadoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contenidoTablaJugadoresMouseClicked
        if (controlJug.equals("") && contenidoTablaJugadores.getSelectedRow() != -1) {
            textfIdJugadores.setText(contenidoTablaJugadores.getValueAt(contenidoTablaJugadores.getSelectedRow(), 0).toString());
            textfNombreJugadores.setText(contenidoTablaJugadores.getValueAt(contenidoTablaJugadores.getSelectedRow(), 1).toString());
            textfUniversidadJugadores.setText(contenidoTablaJugadores.getValueAt(contenidoTablaJugadores.getSelectedRow(), 2).toString());
            combobPosicionJugadores.setSelectedItem(contenidoTablaJugadores.getValueAt(contenidoTablaJugadores.getSelectedRow(), 3).toString());
            combobEquipoJugadores.setSelectedItem(contenidoTablaJugadores.getValueAt(contenidoTablaJugadores.getSelectedRow(), 4).toString());
            
            session = sessionFactory.openSession();
            Transaction trans = session.beginTransaction();
            Jugadores jug = (Jugadores) session.load(Jugadores.class, (int)contenidoTablaJugadores.getValueAt(contenidoTablaJugadores.getSelectedRow(), 0));
            
            spinnerAlturaJugadores.setValue(jug.getAltura());
            spinnerPesoJugadores.setValue(jug.getPeso());
            
            session.close();
        }
    }//GEN-LAST:event_contenidoTablaJugadoresMouseClicked

    //Método para dejar la pestaña jugadores en su estado inicial
    private void botonCancelarJugadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarJugadoresActionPerformed
        controlJug = "";
        botonAceptarJugadores.setEnabled(false);
        botonCancelarJugadores.setEnabled(false);
        botonInsertarJugadores.setEnabled(true);
        botonModificarJugadores.setEnabled(true);
        botonBorrarJugadores.setEnabled(true);
        
        textfIdJugadores.setEditable(false);
        textfNombreJugadores.setEditable(false);
        textfUniversidadJugadores.setEditable(false);
        spinnerAlturaJugadores.setEnabled(false);
        spinnerPesoJugadores.setEnabled(false);
        combobEquipoJugadores.setEnabled(false);
        combobPosicionJugadores.setEnabled(false);
        
        this.contenidoTablaJugadoresMouseClicked(null);
    }//GEN-LAST:event_botonCancelarJugadoresActionPerformed

    //Método para borrar el jugador seleccionado
    private void botonBorrarJugadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarJugadoresActionPerformed
        if (contenidoTablaJugadores.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "No hay ningún jugador seleccionado");
        }
        else {
            try {
                session = sessionFactory.openSession();
                Transaction trans = session.beginTransaction();

                int jugId = (int) contenidoTablaJugadores.getValueAt(contenidoTablaJugadores.getSelectedRow(), 0);
                String nombreEq = (String) contenidoTablaJugadores.getValueAt(contenidoTablaJugadores.getSelectedRow(), 4);
                
                Jugadores jug = (Jugadores) session.load(Jugadores.class, jugId);
                Equipos eq = (Equipos) session.load(Equipos.class, nombreEq);
                
                Set jugadoreses = eq.getJugadoreses();
                jugadoreses.remove(jug);
                eq.setJugadoreses(jugadoreses);
                
                session.update(eq);
                session.delete(jug);
                trans.commit();
                JOptionPane.showMessageDialog(this, "Jugador eliminado correctamente");
                this.menuJugadoresComponentShown(null);
            } catch (ConstraintViolationException e) {
                JOptionPane.showMessageDialog(this, "No se puede borrar el jugador");
            }
        }
    }//GEN-LAST:event_botonBorrarJugadoresActionPerformed

    //Método para permitir insertar un jugador
    private void botonInsertarJugadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInsertarJugadoresActionPerformed
        controlJug = "Insertar";
        
        botonAceptarJugadores.setEnabled(true);
        botonCancelarJugadores.setEnabled(true);
        botonInsertarJugadores.setEnabled(false);
        botonModificarJugadores.setEnabled(false);
        botonBorrarJugadores.setEnabled(false);
        
        textfIdJugadores.setEditable(true);
        textfIdJugadores.setText("");
        textfNombreJugadores.setEditable(true);
        textfNombreJugadores.setText("");
        textfUniversidadJugadores.setEditable(true);
        textfUniversidadJugadores.setText("");
        spinnerAlturaJugadores.setEnabled(true);
        spinnerAlturaJugadores.setValue(0);
        spinnerPesoJugadores.setEnabled(true);
        spinnerPesoJugadores.setValue(0);
        combobEquipoJugadores.setEnabled(true);
        combobPosicionJugadores.setEnabled(true);
    }//GEN-LAST:event_botonInsertarJugadoresActionPerformed

    //Método que permite modificar el jugador seleccionado
    private void botonModificarJugadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarJugadoresActionPerformed
        if (contenidoTablaJugadores.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "No hay ningún jugador seleccionado");
        }
        else {
            controlJug = "Modificar";
            
            botonAceptarJugadores.setEnabled(true);
            botonCancelarJugadores.setEnabled(true);
            botonInsertarJugadores.setEnabled(false);
            botonModificarJugadores.setEnabled(false);
            botonBorrarJugadores.setEnabled(false);

            textfNombreJugadores.setEditable(true);
            textfUniversidadJugadores.setEditable(true);
            spinnerAlturaJugadores.setEnabled(true);
            spinnerPesoJugadores.setEnabled(true);
            combobEquipoJugadores.setEnabled(true);
            combobPosicionJugadores.setEnabled(true);
        }
    }//GEN-LAST:event_botonModificarJugadoresActionPerformed

    private void textfEstIdJugKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfEstIdJugKeyTyped
        
    }//GEN-LAST:event_textfEstIdJugKeyTyped

    //Método para mostrar las estadísticas del jugador buscado
    private void textfEstIdJugKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfEstIdJugKeyReleased
        session = sessionFactory.openSession();
        try {
            int id = Integer.parseInt(textfEstIdJug.getText());
            Jugadores jug = (Jugadores) session.load(Jugadores.class, id);
            Iterator iterator = jug.getEstadisticases().iterator();
            Estadisticas es = null;
            EstadisticasId esId = null;
            textpEstJug.setText("ESTADÍSTICAS DEL JUGADOR: " + jug.getCodigo() +
                    "\nNombre: " + jug.getNombre() +
                    "\nEquipo: " + jug.getEquipos().getNombre() +
                    "\nTemporada\tPtos\tAsis\tTap\tReb\n");
            while(iterator.hasNext()) {
                es = (Estadisticas) iterator.next();
                esId = es.getId();
                textpEstJug.setText(textpEstJug.getText() + esId.getTemporada() + "\t");
                textpEstJug.setText(textpEstJug.getText() + es.getPuntosPorPartido() + "\t");
                textpEstJug.setText(textpEstJug.getText() + es.getAsistenciasPorPartido() + "\t");
                textpEstJug.setText(textpEstJug.getText() + es.getTaponesPorPartido()+ "\t");
                textpEstJug.setText(textpEstJug.getText() + es.getRebotesPorPartido() + "\n");
            }
        } catch (NumberFormatException e) {
            textpEstJug.setText("Introduce solo números");
        } catch (org.hibernate.ObjectNotFoundException e) {
            textpEstJug.setText("No existe ese jugador");
        }
    }//GEN-LAST:event_textfEstIdJugKeyReleased

    private void textfEstIdJugKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfEstIdJugKeyPressed
        
    }//GEN-LAST:event_textfEstIdJugKeyPressed

    private void textpEstEqComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_textpEstEqComponentShown

    }//GEN-LAST:event_textpEstEqComponentShown

    //Método para mostrar las estadísticas de los equipos al entrar en la pestaña de estadísticas de equipos
    private void menuEstEqComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_menuEstEqComponentShown
        session = sessionFactory.openSession();
        Query query = session.createQuery("from Equipos");
        List <Equipos> list = query.list();
        Iterator <Equipos> iterator = list.iterator();
        textpEstEq.setText("Número de equipos: " + Integer.toString(list.size()));
        while (iterator.hasNext()) {
            Equipos eq = (Equipos) iterator.next();
            textpEstEq.setText(textpEstEq.getText() + "\n======\nEQUIPO: " + eq.getNombre());
            Iterator iteratorJug = eq.getJugadoreses().iterator();
            while (iteratorJug.hasNext()) {
                Jugadores jug = (Jugadores) iteratorJug.next();
                Iterator <Estadisticas> iteratorEst = jug.getEstadisticases().iterator();
                float puntos = 0;
                int partidos = 0;
                float pp = 0;
                while(iteratorEst.hasNext()) {
                    Estadisticas est = (Estadisticas) iteratorEst.next();
                    puntos = puntos + est.getPuntosPorPartido();
                    partidos++;
                }
                try {
                    pp = puntos / partidos;
                } catch (ArithmeticException e) {
                    pp = 0;
                }
                textpEstEq.setText(textpEstEq.getText() + "\n" + jug.getCodigo() + ", " + jug.getNombre() + ", " + pp);
            }
        }
    }//GEN-LAST:event_menuEstEqComponentShown

    //Método para mostrar las estadísticas de los jugadores vacías cuando se entre en la pestaña de estadísticas de jugadores
    private void menuEstJugComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_menuEstJugComponentShown
        textfEstIdJug.setText("");
        textpEstJug.setText("");
    }//GEN-LAST:event_menuEstJugComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        sessionFactory = NewHibernateUtil.getSessionFactory();
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Gui().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAceptarEquipos;
    private javax.swing.JButton botonAceptarJugadores;
    private javax.swing.JButton botonBorrarEquipos;
    private javax.swing.JButton botonBorrarJugadores;
    private javax.swing.JButton botonCancelarEquipos;
    private javax.swing.JButton botonCancelarJugadores;
    private javax.swing.JButton botonInsertarEquipos;
    private javax.swing.JButton botonInsertarJugadores;
    private javax.swing.JButton botonModificarEquipos;
    private javax.swing.JButton botonModificarJugadores;
    private javax.swing.JComboBox<String> combobConferenciaEquipos;
    private javax.swing.JComboBox<String> combobDivisionEquipos;
    private javax.swing.JComboBox<String> combobEquipoJugadores;
    private javax.swing.JComboBox<String> combobPosicionJugadores;
    private javax.swing.JTable contenidoTablaEquipos;
    private javax.swing.JTable contenidoTablaJugadores;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelAlturaJugadores;
    private javax.swing.JLabel labelCiudadEquipos;
    private javax.swing.JLabel labelConferenciaEquipos;
    private javax.swing.JLabel labelDivisionEquipos;
    private javax.swing.JLabel labelEquipoJugadores;
    private javax.swing.JLabel labelEstIdJug;
    private javax.swing.JLabel labelIdJugadores;
    private javax.swing.JLabel labelNombreEquipos;
    private javax.swing.JLabel labelNombreJugadores;
    private javax.swing.JLabel labelPesoJugadores;
    private javax.swing.JLabel labelPosicionJugadores;
    private javax.swing.JLabel labelUniversidadJugadores;
    private javax.swing.JPanel menuEquipos;
    private javax.swing.JPanel menuEstEq;
    private javax.swing.JPanel menuEstJug;
    private javax.swing.JPanel menuJugadores;
    private javax.swing.JPanel panelInformacionEquipos;
    private javax.swing.JPanel panelInformacionJugadores;
    private javax.swing.JSpinner spinnerAlturaJugadores;
    private javax.swing.JSpinner spinnerPesoJugadores;
    private javax.swing.JScrollPane tablaEquipos;
    private javax.swing.JScrollPane tablaJugadores;
    private javax.swing.JTextField textfCiudadEquipo;
    private javax.swing.JTextField textfEstIdJug;
    private javax.swing.JTextField textfIdJugadores;
    private javax.swing.JTextField textfNombreEquipos;
    private javax.swing.JTextField textfNombreJugadores;
    private javax.swing.JTextField textfUniversidadJugadores;
    private javax.swing.JTextPane textpEstEq;
    private javax.swing.JTextPane textpEstJug;
    private javax.swing.JTabbedPane ventana;
    // End of variables declaration//GEN-END:variables
}
